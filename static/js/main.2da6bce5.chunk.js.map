{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/Header.js","components/layout/TextInputGroup.js","components/contacts/AddContact1.js","components/pages/About.js","components/pages/NotFound.js","components/contacts/EditContact.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","Object","objectSpread","contacts","filter","contact","id","payload","concat","toConsumableArray","map","Provider","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","dispatch","setState","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","response","wrap","_context","prev","next","axios","get","sent","data","stop","react_default","createElement","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","delete","_this2","_this$props$contact","name","email","phone","className","onClick","style","cursor","float","color","bind","react_router_dom","to","marginRight","Contacts","Fragment","contacts_Contact","Header","branding","href","defaultProps","TextInputGroup","_ref","label","placeholder","onChange","error","htmlFor","classnames","is-invalid","defaulProps","AddContact","errors","e","defineProperty","target","onSubmit","_this$state","newContact","preventDefault","abrupt","post","history","push","_this$state2","layout_TextInputGroup","About","NotFound","EditContact","updateContact","match","params","put","App","context_Provider","layout_Header","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2da6bce5.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'DELETE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.filter(contact => contact.id !== action.payload)\r\n            };\r\n        case 'ADD_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: [action.payload, ...state.contacts]\r\n            };\r\n        case 'UPDATE_CONTACT':\r\n            return {\r\n                ...state,\r\n                // We want to check if this is the contact being updated and if not simply return the original contact\r\n                contacts: state.contacts.map(contact => contact.id === action.payload.id ? (contact = action.payload): contact)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// This is the global state\r\nexport class Provider extends Component {\r\n    state = {\r\n        contacts: [],\r\n        dispatch: action => {\r\n            this.setState(state => reducer(state, action))\r\n        }\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const response = await axios.get('https://jsonplaceholder.typicode.com/users');\r\n\r\n        this.setState({contacts: response.data})\r\n    }\r\n\r\n\r\n    // Before Async/Await\r\n    /*componentDidMount() {\r\n        axios.get('https://jsonplaceholder.typicode.com/users')\r\n            .then(response=>this.setState({contacts:response.data}))\r\n    }*/\r\n\r\n    render() {\r\n        return (\r\n            // Anything that we want to be available throughout the application we pass in here\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        )\r\n    }\r\n}\r\n\r\n// We have a provider and then we have a consumer within any component that we want to access the state from\r\nexport const Consumer = Context.Consumer;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Consumer} from \"../../context\";\r\nimport axios from 'axios';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass Contact extends Component {\r\n    state = {\r\n        showContactInfo: false\r\n    };\r\n\r\n\r\n    onDeleteClick = async (id, dispatch) => {\r\n        await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n\r\n        dispatch({type: 'DELETE_CONTACT', payload: id})\r\n    };\r\n\r\n    // Before Async/Await\r\n    /*onDeleteClick = (id, dispatch) => {\r\n        axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`)\r\n            .then(response => dispatch({type: 'DELETE_CONTACT', payload: id}))\r\n    };*/\r\n\r\n\r\n    render() {\r\n        const {id, name, email, phone} = this.props.contact;\r\n        const {showContactInfo} = this.state;\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const {dispatch} = value;\r\n                    return (\r\n                        <div className=\"card card-body mb-3\">\r\n                            <h4>{name}{' '}\r\n                                <i\r\n                                    onClick={() => {\r\n                                        this.setState({showContactInfo: !this.state.showContactInfo})\r\n                                    }}\r\n                                    className=\"fas fa-chevron-down\"\r\n                                    style={{cursor: 'pointer'}}/>\r\n                                <i\r\n                                    className=\"fas fa-times\"\r\n                                    style={{cursor: 'pointer', float: 'right', color: 'red'}}\r\n                                    onClick={this.onDeleteClick.bind(this, id, dispatch)}/>\r\n                                <Link to={`contact/edit/${id}`}>\r\n                                    <i\r\n                                        className=\"fas fa-pencil-alt\"\r\n                                        style={{cursor: 'pointer', float:'right', color: 'black', marginRight: '1rem'}}\r\n\r\n                                    />\r\n                                </Link>\r\n\r\n                            </h4>\r\n                            {showContactInfo ? (<ul className=\"list-group\">\r\n                                <li className=\"list-group-item\">Email: {email}</li>\r\n                                <li className=\"list-group-item\">Phone: {phone}</li>\r\n                            </ul>) : null}\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired,\r\n};\r\n\r\n\r\nexport default Contact;","import React, {Component} from 'react';\r\nimport Contact from './Contact';\r\nimport {Consumer} from \"../../context\";\r\n\r\n\r\nclass Contacts extends Component {\r\n    render() {\r\n        return (\r\n            <Consumer>\r\n                {/*value comes from Context.Provider from context.js*/}\r\n                {value => {\r\n                    const {contacts} = value;\r\n                    return (\r\n                        <React.Fragment>\r\n                            <h1 className=\"display-4 mb-2\"><span className='text-danger'>Contact</span> List</h1>\r\n                            {contacts.map(contact => (\r\n                                <Contact key={contact.id} contact={contact}/>\r\n                            ))}\r\n                        </React.Fragment>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Contacts;\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n    const {branding} = props;\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n            <div className=\"container\">\r\n                <a href=\"/\" className=\"navbar-brand\">{branding}</a>\r\n                <div>\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/\" className=\"nav-link\">\r\n                                <i className=\"fas fa-home\"/> Home\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/contact/add\" className=\"nav-link\">\r\n                                <i className=\"fas fa-plus\"/> Add\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/about\" className=\"nav-link\">\r\n                                <i className=\"fas fa-question\"/> About\r\n                            </Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n\r\n        </nav>\r\n    );\r\n};\r\n\r\nHeader.defaultProps = {\r\n    branding: 'My App'\r\n};\r\n\r\nHeader.propTypes = {\r\n    branding: PropTypes.string.isRequired\r\n};\r\n\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\n// All of these are coming from props (same as props.label or props.name)\r\nconst TextInputGroup = ({\r\n                            label,\r\n                            name,\r\n                            value,\r\n                            placeholder,\r\n                            type,\r\n                            onChange,\r\n                            error\r\n                        }) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor={name}>{label}</label>\r\n            <input\r\n                type=\"text\"\r\n                name={name}\r\n                className={classnames(\"form-control form-control-lg\", {'is-invalid': error})}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n            />\r\n            {error ? (<div className=\"invalid-feedback\">{error}</div>) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nTextInputGroup.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    label: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    error: PropTypes.string\r\n};\r\n\r\nTextInputGroup.defaulProps = {\r\n    type: 'text'\r\n};\r\n\r\nexport default TextInputGroup;\r\n","import React, {Component} from 'react';\r\nimport {Consumer} from \"../../context\";\r\nimport uuid from 'uuid';\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\nimport axios from 'axios';\r\n\r\nclass AddContact extends Component {\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    };\r\n\r\n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n        const {name, email, phone} = this.state;\r\n\r\n        //Check for Errors\r\n        if (name === '') {\r\n            this.setState({\r\n                errors: {\r\n                    name: 'Name is required!'\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (email === '') {\r\n            this.setState({\r\n                errors: {\r\n                    email: 'Email is required!'\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (phone === '') {\r\n            this.setState({\r\n                errors: {\r\n                    phone: 'Phone is required!'\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n\r\n        const newContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        };\r\n\r\n\r\n        // Async/Await Add Contact\r\n        const response = await axios.post('https://jsonplaceholder.typicode.com/users', newContact);\r\n\r\n        dispatch({\r\n            type: 'ADD_CONTACT', payload: response.data\r\n        });\r\n\r\n\r\n        //Clear State\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        });\r\n\r\n        //Redirect\r\n        this.props.history.push('/');\r\n\r\n    };\r\n\r\n    render() {\r\n        const {name, email, phone, errors} = this.state;\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const {dispatch} = value;\r\n                    return (\r\n                        <div>\r\n                            <div className=\"card mb-3\">\r\n                                <div className=\"card-header\">Add Contact</div>\r\n                                <div className=\"card-body\">\r\n                                    <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                        <TextInputGroup label={'Name'} onChange={this.onChange} value={name}\r\n                                                        placeholder={'Enter Name..'} name={'name'} type={'text'}\r\n                                                        error={errors.name}/>\r\n                                        <TextInputGroup label={'Email'} onChange={this.onChange} value={email}\r\n                                                        placeholder={'Enter Email..'} name={'email'} type={'email'}\r\n                                                        error={errors.email}/>\r\n                                        <TextInputGroup label={'Phone'} onChange={this.onChange} value={phone}\r\n                                                        placeholder={'Enter Phone..'} name={'phone'} type={'text'}\r\n                                                        error={errors.phone}/>\r\n                                        <input type=\"submit\" value=\"Add Contact\" className=\"btn btn-block btn-light\"/>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddContact;","import React from 'react';\r\n\r\nconst About = () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\">About Contact Manager</h1>\r\n            <p className=\"lead\">Simple app to manage contacts</p>\r\n            <p className=\"text-secondary\">Version 1.0.0.</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default About;\r\n","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\"><span className='text-danger'>404</span> Page Not Found</h1>\r\n            <p className=\"lead\">Sorry, that page does not exist.</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NotFound;\r\n","import React, {Component} from 'react';\r\nimport {Consumer} from \"../../context\";\r\nimport uuid from 'uuid';\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\nimport axios from 'axios';\r\n\r\nclass EditContact extends Component {\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const {id} = this.props.match.params;\r\n        const response = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n        const contact = response.data;\r\n\r\n        this.setState({\r\n            name: contact.name,\r\n            email: contact.email,\r\n            phone: contact.phone\r\n        });\r\n    };\r\n\r\n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n        const {name, email, phone} = this.state;\r\n\r\n        //Check for Errors\r\n        if (name === '') {\r\n            this.setState({\r\n                errors: {\r\n                    name: 'Name is required!'\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (email === '') {\r\n            this.setState({\r\n                errors: {\r\n                    email: 'Email is required!'\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        if (phone === '') {\r\n            this.setState({\r\n                errors: {\r\n                    phone: 'Phone is required!'\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        const {id} = this.props.match.params;\r\n\r\n        const updateContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        };\r\n\r\n        const response = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`, updateContact);\r\n\r\n        dispatch({\r\n            type: 'UPDATE_CONTACT', payload: response.data\r\n        });\r\n\r\n        //Clear State\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        });\r\n\r\n        //Redirect\r\n        this.props.history.push('/');\r\n\r\n    };\r\n\r\n\r\n    render() {\r\n        const {name, email, phone, errors} = this.state;\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const {dispatch} = value;\r\n                    return (\r\n                        <div>\r\n                            <div className=\"card mb-3\">\r\n                                <div className=\"card-header\">Edit Contact</div>\r\n                                <div className=\"card-body\">\r\n                                    <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                        <TextInputGroup label={'Name'} onChange={this.onChange} value={name}\r\n                                                        placeholder={'Enter Name..'} name={'name'} type={'text'}\r\n                                                        error={errors.name}/>\r\n                                        <TextInputGroup label={'Email'} onChange={this.onChange} value={email}\r\n                                                        placeholder={'Enter Email..'} name={'email'} type={'email'}\r\n                                                        error={errors.email}/>\r\n                                        <TextInputGroup label={'Phone'} onChange={this.onChange} value={phone}\r\n                                                        placeholder={'Enter Phone..'} name={'phone'} type={'text'}\r\n                                                        error={errors.phone}/>\r\n                                        <input type=\"submit\" value=\"Update Contact\"\r\n                                               className=\"btn btn-block btn-light\"/>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditContact;","import React from 'react';\nimport './App.css';\nimport Contacts from './components/contacts/Contacts';\nimport Header from './components/layout/Header';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Provider} from \"./context\";\nimport AddContact from \"./components/contacts/AddContact1\";\n// Changing BrowserRouter to HashRouter because of GHPages\n//import {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\";\nimport About from './components/pages/About';\nimport NotFound from \"./components/pages/NotFound\";\nimport EditContact from './components/contacts/EditContact';\n\n// In order to use the ContextAPI we have to wrap everything in a Provider Component\nfunction App() {\n    return (\n        <Provider>\n            <Router>\n                <div className=\"App\">\n                    <Header branding=\"Contact Manager\"/>\n                    <div className=\"container\">\n                        <Switch>\n                            <Route exact path=\"/\" component={Contacts}/>\n                            <Route exact path=\"/about\" component={About}/>\n                            <Route exact path=\"/contact/edit/:id\" component={EditContact}/>\n                            <Route exact path=\"/contact/add\" component={AddContact}/>\n                            <Route component={NotFound}/>\n                        </Switch>\n                    </div>\n                </div>\n            </Router>\n        </Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}